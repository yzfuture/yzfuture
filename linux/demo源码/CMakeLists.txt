#Generated by VisualGDB project wizard.
#Note: VisualGDB will automatically update this file when you add new sources to the project.

cmake_minimum_required(VERSION 2.7)

project(readCardDemo)

#set(LINUXVERSION "x86_linux")
#set(LINUXVERSION "arm_Rpi")
#set(LINUXVERSION "arm-himix200")
set(LINUXVERSION "arm-linux")
#set(LINUXVERSION "arm-uclinux")


set(INCLUDEPATH ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/include)

MESSAGE( STATUS "this var = ${LINUXVERSION}.")

if(${LINUXVERSION} STREQUAL "x86_linux")
MESSAGE( STATUS "The x86_linux in.")
SET(CMAKE_SYSTEM_NAME linux)
set(CMAKE_CXX_COMPILER g++)
set(CMAKE_C_COMPILER   gcc)
set(LIBDLLPATH ${CMAKE_SOURCE_DIR}/lib/x86_linux/)
set(LIBSUFFIX ".so")

elseif(${LINUXVERSION} STREQUAL "arm_Rpi")
MESSAGE( STATUS "The arm_Rpi in.")
SET(CMAKE_SYSTEM_NAME linux)
set(CMAKE_CXX_COMPILER g++)
set(CMAKE_C_COMPILER   gcc)
set(LIBDLLPATH ${CMAKE_SOURCE_DIR}/lib/arm_RaspberryPi/)
set(LIBSUFFIX ".so")

elseif(${LINUXVERSION} STREQUAL "arm-himix200")
MESSAGE( STATUS "The arm-himix200 in.")
SET(CMAKE_SYSTEM_NAME arm-himix200-linux)
SET(CMAKE_CXX_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-c++)
SET(CMAKE_C_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-gcc)
set(LIBDLLPATH ${CMAKE_SOURCE_DIR}/lib/arm_himix200/)
set(LIBSUFFIX ".so")

add_library( udevlib SHARED  IMPORTED )
set_target_properties( udevlib PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libudev${LIBSUFFIX} )

elseif(${LINUXVERSION} STREQUAL "arm-linux")
MESSAGE( STATUS "The arm-linux in.")

SET(CMAKE_SYSTEM_NAME arm-linux)
SET(CMAKE_CXX_COMPILER /Tyger/arm_linux/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin/arm-linux-gnueabihf-c++)
SET(CMAKE_C_COMPILER /Tyger/arm_linux/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)
set(LIBDLLPATH ${CMAKE_SOURCE_DIR}/lib/arm_linux/)
set(LIBSUFFIX ".so")

add_library( udevlib SHARED  IMPORTED )
set_target_properties( udevlib PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libudev${LIBSUFFIX} )

elseif(${LINUXVERSION} STREQUAL "arm-uclinux")
SET(CMAKE_CXX_COMPILER /Tyger/arm_uclinux/toolchain/gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-c++)
SET(CMAKE_C_COMPILER /Tyger/arm_uclinux/toolchain/gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)
set(LIBDLLPATH ${CMAKE_SOURCE_DIR}/lib/arm_uclinux/)
set(LIDSOPATH ${CMAKE_SOURCE_DIR}/lib/arm_uclinux/)
set(LIBSUFFIX ".so")

endif()

aux_source_directory(./ DIR_SRCS)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -ggdb -ffunction-sections -O0 -fvisibility=hidden -fPIC")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c++11 -ggdb -ffunction-sections -O0 -fvisibility=hidden -fPIC")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=c++11 -ggdb -ffunction-sections -O0 -fvisibility=hidden -fPIC")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=c++11 -ggdb -ffunction-sections -O0 -fvisibility=hidden -fPIC")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -std=c++11 -ggdb -ffunction-sections -O0 -fvisibility=hidden -fPIC")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -std=c++11 -ggdb -ffunction-sections -O0 -fvisibility=hidden -fPIC")
set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${CMAKE_SOURCE_DIR}/-Wl,-gc-sections,--no-as-needed ${CMAKE_SOURCE_DIR}/-ldl ${CMAKE_SOURCE_DIR}/-fPIC)
include_directories(./)
include_directories(${INCLUDEPATH})
link_directories(${LIBDLLPATH})

add_executable( readCardDemo ${DIR_SRCS})

add_library( boost_filesystem SHARED  IMPORTED )
set_target_properties( boost_filesystem PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libboost_filesystem${LIBSUFFIX} )

add_library( boost_system SHARED  IMPORTED )
set_target_properties( boost_system PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libboost_system${LIBSUFFIX} )

add_library( boost_thread SHARED  IMPORTED )
set_target_properties( boost_thread PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libboost_thread${LIBSUFFIX} )

add_library( crypto SHARED  IMPORTED )
set_target_properties( crypto PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libcrypto${LIBSUFFIX} )

add_library( curl SHARED  IMPORTED )
set_target_properties( curl PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libcurl${LIBSUFFIX} )

add_library( iconv SHARED  IMPORTED )
set_target_properties( iconv PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libiconv${LIBSUFFIX} )

add_library( ssl SHARED  IMPORTED )
set_target_properties( ssl PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libssl${LIBSUFFIX} )

add_library( usb-1.0 SHARED  IMPORTED )
set_target_properties( usb-1.0 PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libusb-1.0${LIBSUFFIX} )

add_library( hidapi-libusb SHARED  IMPORTED )
set_target_properties( hidapi-libusb PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libhidapi-libusb${LIBSUFFIX} )


add_library( zyreadcard SHARED  IMPORTED )
set_target_properties( zyreadcard PROPERTIES IMPORTED_LOCATION  ${LIBDLLPATH}libreadCardInfo${LIBSUFFIX} )



if(${LINUXVERSION} STREQUAL "arm-himix200" OR ${LINUXVERSION} STREQUAL "arm-linux" )
MESSAGE( STATUS "arm-himix200 build")
target_link_libraries( readCardDemo
			-Wl,--start-group
			zyreadcard
			hidapi-libusb
			usb-1.0
			curl 
			iconv 
			crypto 
			ssl 
			boost_system
			boost_filesystem 
			boost_thread 
			pthread
			udevlib
			dl
			 -Wl,--end-group
			)
			
else()
MESSAGE( STATUS "other build")
target_link_libraries( readCardDemo
			-Wl,--start-group
			zyreadcard
			hidapi-libusb
			usb-1.0
			curl 
			iconv 
			crypto 
			ssl 
			boost_system
			boost_filesystem 
			boost_thread 
			pthread
			dl
			 -Wl,--end-group
			)
endif() 